{"version":3,"file":"public/js/riffel.js","sources":["app/script/initialize.coffee","app/script/views/section.coffee","app/script/views/slide-content.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbsourcesContent":["var SectionView;\n\nSectionView = require(\"script/views/section\");\n\n$(\"section\").each(function(i, section) {\n  return new SectionView({\n    el: section\n  });\n});\n\n$(function() {\n  return $(\"#nav a, #intro-nav a\").smoothScroll();\n});\n","var SectionView, SlideContentView, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nSlideContentView = require(\"script/views/slide-content\");\n\nmodule.exports = SectionView = (function(_super) {\n  __extends(SectionView, _super);\n\n  function SectionView() {\n    this.onClickSectionLink = __bind(this.onClickSectionLink, this);\n    this.onSlideChanged = __bind(this.onSlideChanged, this);\n    this.navNext = __bind(this.navNext, this);\n    this.navPrevious = __bind(this.navPrevious, this);\n    this.onResizeWindow = __bind(this.onResizeWindow, this);\n    _ref = SectionView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  SectionView.prototype.isInTransition = false;\n\n  SectionView.prototype.events = {\n    \"click ul.section-nav a\": \"onClickSectionLink\",\n    \"click a.section-nav-arrow.previous\": \"navPrevious\",\n    \"click a.section-nav-arrow.next\": \"navNext\"\n  };\n\n  SectionView.prototype.initialize = function() {\n    if (this.$el.find(\".slides\").length) {\n      this.initSlides();\n    }\n    return $(window).on(\"resize\", this.onResizeWindow);\n  };\n\n  SectionView.prototype.onResizeWindow = function() {\n    this.slides = this.$el.find(\".slides\");\n    this.slides.unslider({\n      fluid: true,\n      dots: false,\n      complete: this.onSlideChanged,\n      delay: false\n    });\n    return this.slider = this.slides.data(\"unslider\");\n  };\n\n  SectionView.prototype.initSlides = function() {\n    var slideNavLinks;\n    slideNavLinks = this.$el.find(\".slides > ul > li\");\n    slideNavLinks.each(function(i, slide) {\n      return $(slide).attr(\"data-index\", i);\n    });\n    this.$el.find(\"ul.section-nav li\").each(function(i, navItem) {\n      return $(navItem).attr(\"data-index\", i);\n    });\n    this.slides = this.$el.find(\".slides\");\n    this.slides.unslider({\n      fluid: true,\n      dots: false,\n      complete: this.onSlideChanged,\n      delay: false\n    });\n    this.slider = this.slides.data(\"unslider\");\n    this.onSlideSelected();\n    return this.slides.each(function(i, s) {\n      return new SlideContentView({\n        el: s\n      });\n    });\n  };\n\n  SectionView.prototype.navPrevious = function(e) {\n    e.preventDefault();\n    return this.slider.prev();\n  };\n\n  SectionView.prototype.navNext = function(e) {\n    e.preventDefault();\n    return this.slider.next();\n  };\n\n  SectionView.prototype.onSlideChanged = function() {\n    this.setSelectedNavItem(this.slider.current);\n    return this.onSlideSelected();\n  };\n\n  SectionView.prototype.onSlideSelected = function() {\n    var $arrows, className, sectionHeight;\n    sectionHeight = this.$el.outerHeight();\n    $arrows = this.$el.find(\"a.section-nav-arrow\");\n    $arrows.css({\n      top: (sectionHeight / 2) - ($arrows.height() / 2)\n    });\n    className = this.getCurrentSlideEl().attr(\"id\");\n    return this.$el.attr(\"class\", className);\n  };\n\n  SectionView.prototype.getCurrentSlideEl = function() {\n    var slide;\n    slide = this.slider.items.eq(this.slider.current);\n    return $(slide);\n  };\n\n  SectionView.prototype.onClickSectionLink = function(e) {\n    var slideID;\n    e.preventDefault();\n    slideID = $(e.currentTarget).attr(\"href\");\n    return this.showSlide($(slideID).data(\"index\"));\n  };\n\n  SectionView.prototype.showSlide = function(slideIndex) {\n    return this.slider.move(slideIndex);\n  };\n\n  SectionView.prototype.setSelectedNavItem = function(slideIndex) {\n    this.$el.find(\"ul.section-nav li\").removeClass(\"selected\");\n    return this.$el.find(\"ul.section-nav li[data-index='\" + slideIndex + \"']\").addClass(\"selected\");\n  };\n\n  return SectionView;\n\n})(Backbone.View);\n","var SlideContentView, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = SlideContentView = (function(_super) {\n  __extends(SlideContentView, _super);\n\n  function SlideContentView() {\n    this.closePage = __bind(this.closePage, this);\n    this.onClickSlideContentNav = __bind(this.onClickSlideContentNav, this);\n    _ref = SlideContentView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  SlideContentView.prototype.events = {\n    \"click .slide-nav li a\": \"onClickSlideContentNav\",\n    \"click a.close-slide-content\": \"closePage\"\n  };\n\n  SlideContentView.prototype.initialize = function() {\n    this.initOverlayPages();\n    return this.initGalleries();\n  };\n\n  SlideContentView.prototype.initOverlayPages = function() {\n    this.overlay = this.$el.find(\".slide-content-overlay\");\n    this.overlay.css({\n      top: this.overlay.height()\n    });\n    return this.pages = this.$el.find(\"div.slide-content\");\n  };\n\n  SlideContentView.prototype.initGalleries = function() {\n    var _this = this;\n    return $(\"div.gallery\").each(function(i, el) {\n      return $(el).magnificPopup({\n        delegate: \"a\",\n        type: \"image\",\n        titleSrc: \"title\",\n        gallery: {\n          enabled: true\n        }\n      });\n    });\n  };\n\n  SlideContentView.prototype.onClickSlideContentNav = function(e) {\n    var $link, firstImg;\n    e.preventDefault();\n    $link = $(e.currentTarget);\n    if (!$link.hasClass(\"fresco-gallery\")) {\n      return this.showPage($link.attr(\"href\"));\n    } else {\n      firstImg = $($link.attr(\"href\")).find(\"a\").first();\n      return firstImg.click();\n    }\n  };\n\n  SlideContentView.prototype.showPage = function(pageID) {\n    this.page = this.$el.find(pageID);\n    this.overlay.show();\n    this.overlay.css({\n      top: 0\n    });\n    return this.page.show();\n  };\n\n  SlideContentView.prototype.closePage = function(e) {\n    e.preventDefault();\n    this.pages.hide();\n    return this.overlay.css({\n      top: this.overlay.height()\n    });\n  };\n\n  return SlideContentView;\n\n})(Backbone.View);\n"]}